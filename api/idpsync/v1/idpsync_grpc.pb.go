// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package idpsync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDPSyncClient is the client API for IDPSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDPSyncClient interface {
	SyncUser(ctx context.Context, in *SyncUserRequest, opts ...grpc.CallOption) (*SyncUserResponse, error)
}

type iDPSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewIDPSyncClient(cc grpc.ClientConnInterface) IDPSyncClient {
	return &iDPSyncClient{cc}
}

func (c *iDPSyncClient) SyncUser(ctx context.Context, in *SyncUserRequest, opts ...grpc.CallOption) (*SyncUserResponse, error) {
	out := new(SyncUserResponse)
	err := c.cc.Invoke(ctx, "/idpsync.v1.IDPSync/SyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDPSyncServer is the server API for IDPSync service.
// All implementations should embed UnimplementedIDPSyncServer
// for forward compatibility
type IDPSyncServer interface {
	SyncUser(context.Context, *SyncUserRequest) (*SyncUserResponse, error)
}

// UnimplementedIDPSyncServer should be embedded to have forward compatible implementations.
type UnimplementedIDPSyncServer struct {
}

func (UnimplementedIDPSyncServer) SyncUser(context.Context, *SyncUserRequest) (*SyncUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUser not implemented")
}

// UnsafeIDPSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDPSyncServer will
// result in compilation errors.
type UnsafeIDPSyncServer interface {
	mustEmbedUnimplementedIDPSyncServer()
}

func RegisterIDPSyncServer(s grpc.ServiceRegistrar, srv IDPSyncServer) {
	s.RegisterService(&IDPSync_ServiceDesc, srv)
}

func _IDPSync_SyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDPSyncServer).SyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idpsync.v1.IDPSync/SyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDPSyncServer).SyncUser(ctx, req.(*SyncUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IDPSync_ServiceDesc is the grpc.ServiceDesc for IDPSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IDPSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idpsync.v1.IDPSync",
	HandlerType: (*IDPSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncUser",
			Handler:    _IDPSync_SyncUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/idpsync/v1/idpsync.proto",
}
